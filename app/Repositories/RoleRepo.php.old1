<?php

namespace App\Repositories;

use App\Models\Role;
use App\Models\Permission;
use App\Repositories\IRepo;
use App\Models\PermissionRole;
use Illuminate\Support\Facades\DB;

class RoleRepo implements IRepo
{
    private $role, $permissionRole, $permission;

    public function __construct(Role $role, PermissionRole $permissionRole, Permission $permission)
    {
        $this->role = $role;
        $this->permissionRole = $permissionRole;
        $this->permission = $permission;
    }

    public function all()
    {
        $roles = Role::with('permissions')->get();

        // groupBy adds key i.e. "user" or "task" to array of permissions
        // above keys are removed by values() methods and reseted to 0,1,2,3

        $rolesGroupedByPermissionNameKey = $roles->map(                                                         // map outputs roles that are grouped by key from permission name i.e. "user" or "task"
            function ($role) {
                $permissionsGroupedByModuleOfRole =  $role->permissions->groupBy(function ($permission) {       //from groupBy return array of permissions grouped by value returned by callback funtion i.e. "user" or "task"
                    return explode('_', $permission->name)[1];                                                  // from "create_user" return "user" // explode break "create_user" to ["create", "user"] and return value at 1
                });
                return [
                    'name' => $role->name,
                    'modules' => $permissionsGroupedByModuleOfRole->map(function ($permissions, $module) {       //module = key from $permissionsGroupedByModuleOfRole i.e. "user" or "task"
                        $crud = [false, false, false, false];
                        foreach ($permissions as $permission) {
                            switch (explode('_', $permission->name)[0]) {                                       //switch takes output from explode(["create", "user"] )[0]
                                case 'create':                                                                  //and cases switch to true if that key exist
                                    $crud[0] = true;
                                    break;
                                case 'read':
                                    $crud[1] = true;
                                    break;
                                case 'update':
                                    $crud[2] = true;
                                    break;
                                case 'delete':
                                    $crud[3] = true;
                                    break;
                            }
                        }

                        return ['name' => $module, 'crud' => $crud,];
                    })->values()->toArray(),
                ];
            }
        );

        $permissions = $this->permission->get();

        $permissionsGroupedByModuleKye = $permissions->groupBy(function ($permission) {
            return explode('_', $permission->name)[1];
        });

        $newPermissionArray = $permissionsGroupedByModuleKye->map(function ($permissions, $module) {
            $crud = [false, false, false, false];
            return ['name' => $module, 'crud' => $crud,];
        })->values()->toArray();

        return [$rolesGroupedByPermissionNameKey, $newPermissionArray];
    }

    public function store($data)
    {

        // $roles = [];

        // foreach ($data[0] as $roleData) {
        //     $role = [
        //         'name' => $roleData['name'],
        //         'permissions' => []
        //     ];

        //     foreach ($roleData['modules'] as $moduleData) {
        //         $permissions = [];

        //         if ($moduleData['crud'][0]) {
        //             $permissions[] = 'create_' . $moduleData['name'];
        //         }

        //         if ($moduleData['crud'][1]) {
        //             $permissions[] = 'read_' . $moduleData['name'];
        //         }

        //         if ($moduleData['crud'][2]) {
        //             $permissions[] = 'update_' . $moduleData['name'];
        //         }

        //         if ($moduleData['crud'][3]) {
        //             $permissions[] = 'delete_' . $moduleData['name'];
        //         }

        //         $role['permissions'] = array_merge($role['permissions'], $permissions);
        //     }

        //     $roles[] = $role;
        // }

        $role = $data;
        unset($role['permission_ids']);
        try {
            DB::beginTransaction();

            $role = $this->role->create($role);

            foreach ($data["permission_ids"] as $id) {
                $this->permissionRole->create([
                    'role_id'   => $role->id,
                    'permission_id' => $id
                ]);
            }

            DB::commit();
            return;
        } catch (\Exception $e) {
            DB::rollBack();
        }
        return;
    }

    public function edit($id)
    {
        return $this->role->find($id);
    }

    public function update($data, $id)
    {
        // return $this->role->where('id', $id)->update($atrributes);
        // dd($this->permissionRole->all()->where('role_id', $id));
        $role = $data;
        unset($role['permission_ids']);
        try {
            DB::beginTransaction();
            $x = $this->role->find($id);
            $x->update($role);
            dd($x);

            // dd($data["permission_ids"]);
            // $test = $this->role->permissions()->sync($data["permission_ids"]);
            $test = $role->permissions()->syncWithPivotValues($data["permission_ids"], ['active' => true]);
            dd($test);
            // DB::rollBack();
            // foreach ($data["permission_ids"] as $pid) {
            //     // dd($id);
            //     $old_data = $this->permissionRole->all()->where('role_id', $id)->delete();
            //     $this->permissionRole->firstOrCreate([
            //         'role_id'   => $role->id,
            //         'permission_id' => $pid
            //     ]);
            // }

            DB::commit();
            return;
        } catch (\Exception $e) {
            DB::rollBack();
            dd($e);
        }
        return;
    }

    public function delete($id)
    {
        return $this->role->where('id', $id)->delete();
    }
}
